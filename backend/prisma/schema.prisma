// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MASTER
  STUDENT
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum AutomationTrigger {
  ON_CANCELLATION
  ON_REMINDER
  ON_BOOKING
}

enum ReportType {
  APPOINTMENTS
  EARNINGS
  STUDENT_PROGRESS
  ENGAGEMENT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STUDENT)
  isNewUser     Boolean   @default(true)
  hasProfile    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  masterProfile MasterProfile?
  studentProfile StudentProfile?
  appointmentsAsMaster Appointment[] @relation("MasterAppointments")
  appointmentsAsStudent Appointment[] @relation("StudentAppointments")
  messagesSent  Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  automations   Automation[]
  reports       Report[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MasterProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  bio          String?
  specialties  String[]
  hourlyRate   Float
  availability String?
  location     String?
  phoneNumber  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  skillLevel      String?
  goals           String[]
  preferredSports String[]
  medicalInfo     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Appointment {
  id          String            @id @default(cuid())
  masterId    String
  studentId   String
  date        DateTime
  duration    Int               // in minutes
  status      AppointmentStatus @default(PENDING)
  notes       String?
  location    String?
  price       Float?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  master      User              @relation("MasterAppointments", fields: [masterId], references: [id])
  student     User              @relation("StudentAppointments", fields: [studentId], references: [id])
  messages    Message[]
  automations Automation[]
}

model Message {
  id           String      @id @default(cuid())
  appointmentId String
  senderId     String
  receiverId   String
  content      String
  type         MessageType @default(TEXT)
  isRead       Boolean     @default(false)
  createdAt    DateTime    @default(now())

  // Relations
  appointment  Appointment @relation(fields: [appointmentId], references: [id])
  sender      User        @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User        @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Tag {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Automation {
  id          String           @id @default(cuid())
  name        String
  description String?
  trigger     AutomationTrigger
  action      String
  isActive    Boolean          @default(true)
  userId      String
  appointmentId String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user        User             @relation(fields: [userId], references: [id])
  appointment Appointment?     @relation(fields: [appointmentId], references: [id])
}

model Report {
  id          String     @id @default(cuid())
  name        String
  type        ReportType
  data        Json
  userId      String
  dateRange   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id])
} 